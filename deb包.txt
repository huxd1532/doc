debian deb软件包打包流程（含打包实例）


环境变量值
环境变量值    在家目录下的.bashrc文件中加入如下三行,根据个人信息替换
   1 DEBFULLNAME="mabingwen"
   2 DEBEMAIL="mabingwen_cm@deepin.com"
   3 export DEBFULLNAME DEBEMAIL



本文的实例包为powder,一款物理沙盒模拟游戏
第一步：
解压下载的文件
ls
 LICENSE   powder64   README.md

然后以软件名建一个文件夹,将解压出来的文件放进去,再以 软件名-版本号 建一个文件夹,将刚才的文件夹放进去

mkdir powder
ls
   LICENSE   powder   powder64   README.md
mv ./* powder
ls
  powder
mkdir powder-94.1
mv powder powder-94.1
ls
  powder-94.1
tree
.
    powder-94.1
        powder
            LICENSE
            powder64
            README.md

第二步：
接下来在当面目录创建一个icons文件夹和以软件名为名的desktop文件
icons文件夹存放软件的图标,我们可以去网上或者源码里找到软件的图标文件,根据图标大小放入icons下不同的文件夹下

icons文件夹的格式为
.
    icons
        hicolor
            128*128
                apps
                    powder.png
            256*256
                apps
            32*32
                apps
            48*48
                apps
            64*64
                apps
.
    powder-94.1
        powder
            LICENSE
            powder64
            README.md
        因为我找的图标大小为128x128,所以将它放入icons/hicolor/128x128/apps下



然后写一个powder.desktop文件,写好的文件格式如下
cat powder.desktop
  [Desktop Entry]
  Name=powder
  Comment=A physical sandbox simulation game
  Exec=/opt/powder/powder64
  Icon=powder
  Terminal=false
  Categories=Game
  Type=Application

desktop语法解释
[Desktop Entry] 文件头
Name 应用名称
Comment 软件描述信息
Exec 二进制文件的路径
Icon 图标名
Terminal 是否使用终端
Type 启动器类型
Categories 应用的类型 可用的字段参考


第三步：
接下来,使用 dh_make --createorig -s 命令创建debian目录,并在上层目录初始化出来源码包
确认信息正确输入y即可

当前目录下会自动创建debian目录,目录下有很多打包使用的模板文件,以.ex/.EX结尾,具体用途参考 模板文件参考,对于此软件包,我们不需要这些模板文件,所以全部删掉
ls
  changelog         manpage.xml.ex      powder.doc-base.EX     rules
  compat            menu.ex             powder-docs.docs       source
  control           postinst.ex         preinst.ex             watch.ex
  copyright         postrm.ex           prerm.ex               
  manpage.1.ex      powder.cron.d.ex    README.Debian
  manpage.sgml.ex   powder.default.ex   README.source
rm *.ex *.EX *.docs
ls
  changelog    control     README.Debian    rules
  compat       copyright   README.source    source


第四步：
然后修改control文件（这里的 control 文件是 dh_make 命令为我们创建的）
对各个Control文件的具体描述说明,参考Control文件说明,我们本次打包,只需修改sections字段,homepage字段,Architecture字段,Description字段,修改完后如下格式
 1  Source: powder
 2  Section: games           
 3  Priority: optional
 4  Maintainer: mabingwen <mabingwen_cm@deepin.com>
 5  Build-Depends: debhelper (>= 9)
 6  Standards-Version: 3.9.8
 7  Homepage: https://powdertoy.co.uk/
 8  #Vcs-Git: https://anonscm.debian.org/collab-maint/powder.git
 9  #Vcs-Browser: https://anonscm.debian.org/cgit/collab-maint/powder.git
 10
 11 Package: powder
 12 Architecture: amd64
 13 Depends: ${shlibs:Depends}, ${misc:Depends}
 14 Description: a cool game
 15  A physical sandbox simulation game, very interesting

第 1–7 行是源代码包的控制信息。第 11–15 行是二进制包的控制信息
本次修改的几个字段解释
sections    为软件分类,字段值参考 sections字段值参考          games 
homepage    软件的主页的网址                                https://powdertoy.co.uk/
Architecture    支持的架构,因为该二进制为64位,所以只用写amd64             
descriptions    软件的描述信息                             a cool game
Source      源代码包的名称
Priority    用户安装此软件包的优先级(optional 优先级适用于与优先级为 required、important 或 standard 的软件包不冲突的新软件包)
Maintainer  维护者的姓名和电子邮件地址
Build-Depends    列出了编译此软件包需要的软件包(对于所有在 debian/rules 文件中使用 dh 命令打包的软件包，必须在 Build-Depends 中包含 debhelper (>=9) 以满足 Debian Policy 中对 clean target 的要求)
Standards-Version  此软件包所依据的 Debian Policy Manual 标准版本号
Package       二进制软件包的名称，通常情况下与源代码包相同
最后一行是长描述开始的地方。这应当是一段更详细地描述软件包的话
添加版本控制系统位置 Vcs-* 项。[35] 这里powder 软件包的VCS 处于 Debian Alioth Git 服务的 git://git.debian.org/git/collab-maint/powder.git
更详细请看https://www.debian.org/doc/manuals/maint-guide/dreq.zh-cn.html#control

接下来创建install文件,install文件用途是指定各个文件的安装路径,格式参考
cat install
  icons/ /usr/share/
  powder/ /opt
  powder.desktop /usr/share/applications/

install文件解释
每行的第一列为当前文件,第二列为安装路径,我们将icons文件夹放入/usr/share目录下,将二进制程序及其他解压出来的文件 放在/opt目录下,将.desktop文件放在/usr/share/applications/下



因为是从二进制包构建的,不用编译和生成依赖库等行为,但是pbuild时会默认出发这写命令,所以我们可以在rules文件里覆盖掉这些指令,让他什么都不做,如图,在rules文件里加入如下选中的几行
1  #!/usr/bin/make -f
2  # See debhelper(7) (uncomment to enable)
3  # output every command that modifies files on the build system.
4  #export DH_VERBOSE = 1
5
6
7  # see FEATURE AREAS in dpkg-buildflags(1)
8  #export DEB_BUILD_MAINT_OPTIONS = hardening=+all
9
10 # see ENVIRONMENT in dpkg-buildflags(1)
11 # package maintainers to append CFLAGS
12 #export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
13 # package maintainers to append LDFLAGS
14 #export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed
15
16 #for mutil-arch packages
17 #source_tar = ../
18 #source_dir = ../
19 #ifneq ($(DEB_HOST_ARCH),amd64)
20 #   source_tar = ../
21 #   source_dir = ../
22 #endif
23
24 %:
25     dh $@
26
27 override_dh_auto_build:                     
28
29 override_dh_shlibdeps:                       
30
31 override_dh_strip:                          
32
33 # dh_make generated override targets
34 # This is example for Cmake (See https://bugs.debian.org/641051)
35 #override_dh_auto_configure:
36 #   dh_auto_configure -- # -DCMAKE_LIBRARY_PATH=$(DEB_HOST_MULTIARCH)



然后修改changlog文件,使用 命令 dch -i  生成一个模板,描述此次的更新行为(第三行),将UNRELEASED改为unstable 保存退出
1  powder (94.1-2) unstable; urgency=medium
2
3    * it's a test build,build on Debian 10
4
5  -- mabingwen <mabingwen_cm@deepin.com> Mon, 11 Nov 2019 17:30:04 +0800
6
7  powder (94.1-1) unstable; urgency=medium
8
9    * Initial release (Closes: #nnnn) <nnnn is the bug number of your ITP>
10
11 -- mabingwen <mabingwen_cm@deepin.com> Mon, 11 Nov 2019 17:07:44 +0800
第 1 行是软件包名、版本号、发行版和紧急程度。软件包名必须与实际的源代码包名相同，发行版应该是 unstable。除非有特殊原因，紧急程度默认设置为 medium（中等）。


第五步：
然后,使用dpkg-source -b ./ 命令 生成.dsc文件和debian描述文件
dpkg-source -b ./
ls ../
  powder-94.1                     powder-94.1-lin64.zip
  powder_94.1-2.debian.tar.xz     powder_94.1.orig.tar.xz
  powder_94.1-2.dsc


最后,使用pbuilder工具打出deb包
dpkg-buildpackage -us -uc -nc

第六步：
sudo dpkg -i powder_94.1-1_amd64.deb  安装本地deb包
dpkg-deb -c powder_94.1-1_amd64.deb    查看deb包要安装到本机文件及路径 

第七步：
在opt下运行可执行文件
cd /opt/powder
./powder64
